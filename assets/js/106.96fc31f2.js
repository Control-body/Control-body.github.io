(window.webpackJsonp=window.webpackJsonp||[]).push([[106],{503:function(n,t,a){"use strict";a.r(t);var s=a(56),r=Object(s.a)({},(function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"第-1-章-nginx-简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第-1-章-nginx-简介"}},[n._v("#")]),n._v(" 第 1 章 Nginx 简介")]),n._v(" "),a("h2",{attrs:{id:"_1-1-nginx概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-nginx概述"}},[n._v("#")]),n._v(" 1.1 Nginx概述")]),n._v(" "),a("p",[n._v('Nginx ("engine x") 是一个高性能的 HTTP 和反向代理服务器,特点是占有内存少，并发能\n力强，事实上 nginx 的并发能力确实在同类型的网页服务器中表现较好，中国大陆使用 nginx\n网站用户有：百度、京东、新浪、网易、腾讯、淘宝等')]),n._v(" "),a("h2",{attrs:{id:"_1-2-nginx-作为-web-服务器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-nginx-作为-web-服务器"}},[n._v("#")]),n._v(" 1.2 Nginx 作为 web 服务器")]),n._v(" "),a("p",[n._v("Nginx 可以作为静态页面的 web 服务器，同时还支持 CGI 协议的动态语言，比如 perl、php\n等。但是不支持 java。Java 程序只能通过与 tomcat 配合完成。Nginx 专为性能优化而开发，\n性能是其最重要的考量,实现上非常注重效率 ，能经受高负载的考验,有报告表明能支持高\n达 50,000 个并发连接数。")]),n._v(" "),a("h2",{attrs:{id:"_1-3-正向代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-正向代理"}},[n._v("#")]),n._v(" 1.3 正向代理")]),n._v(" "),a("p",[n._v("Nginx 不仅可以做反向代理，实现负载均衡。还能用作正向代理来进行上网等功能。\n正向代理：如果把局域网外的 Internet 想象成一个巨大的资源库，则局域网中的客户端要访问 Internet，则需要通过代理服务器来访问，这种代理服务就称为正向代理。(访问的是 目标地址 "),a("strong",[n._v("需要配置 代理服务器")]),n._v(")\n"),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/03/image-2dd7393402054726bdf3a3303ad29666.png",alt:"image.png"}})]),n._v(" "),a("h2",{attrs:{id:"_1-4-反向代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-反向代理"}},[n._v("#")]),n._v(" 1.4 反向代理")]),n._v(" "),a("p",[n._v("反向代理，其实客户端对代理是"),a("strong",[n._v("无感知的")]),n._v("，因为"),a("strong",[n._v("客户端不需要任何配置")]),n._v("就可以访问，我们只需要将请求发送到"),a("strong",[n._v("反向代理服务器")]),n._v("，由反向代理服务器去选择目标服务器获取数据后，在返回给客户端，此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是"),a("strong",[n._v("代理服务器地址")]),n._v("，"),a("strong",[n._v("隐藏了真实服务器 IP")]),n._v(" 地址\n"),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/03/image-51cf72e281134326a072659055e2dae2.png",alt:"image.png"}})]),n._v(" "),a("h2",{attrs:{id:"_1-5-负载均衡"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-负载均衡"}},[n._v("#")]),n._v(" 1.5 负载均衡")]),n._v(" "),a("p",[n._v("客户端发送多个"),a("strong",[n._v("请求到服务器")]),n._v("，服务器处理请求，有一些可能要与数据库进行交互，服务器处理完毕后，再将结果返回给客户端。这种架构模式对于早期的系统相对单一，并发请求相对较少的情况下是比较适合的，成本也低。但是随着信息数量的不断增长，访问量和数据量的飞速增长，以及系统业务的复杂\n度增加，这种架构会造成服务器相应客户端的请求日益"),a("strong",[n._v("缓慢")]),n._v("，并发量特别大的时候，还容易造成"),a("strong",[n._v("服务器直接崩溃")]),n._v("。很明显这是由于服务器性能的瓶颈造成的问题，那么如何解决这种情况呢？\n我们首先想到的可能是****，比升级服务器的配置如提高 CPU 执行频率，加大内存等提高机器的物理性能来解决此问题，但是我们知道摩尔定律的日益失效，硬件的"),a("strong",[n._v("性能提升已经不能")]),n._v("\n满足日益提升的需求了。最明显的一个例子，天猫双十一当天，某个热销商品的瞬时访问量\n是极其庞大的，那么类似上面的系统架构，将机器都增加到现有的顶级物理配置，都是不能\n够满足需求的。那么怎么办呢？\n上面的分析我们去掉了增加服务器物理配置来解决问题的办法，也就是说纵向解决问题\n的办法行不通了，那么"),a("strong",[n._v("横向增加服务器的数量")]),n._v("呢？这时候"),a("strong",[n._v("集群")]),n._v("的概念产生了，单个服务器解决不了，我们增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到"),a("strong",[n._v("单个")]),n._v("服务器上的情况改为将请求分发到"),a("strong",[n._v("多个服务器")]),n._v("上，将负载分发到不同的服务器，也就是我们所说的"),a("strong",[n._v("负载均衡")]),n._v(" "),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/03/image-dc2a68e9a62e4d8ebb002988893bfaf2.png",alt:"image.png"}})]),n._v(" "),a("h2",{attrs:{id:"_1-6-动静分离"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-动静分离"}},[n._v("#")]),n._v(" 1.6 动静分离")]),n._v(" "),a("p",[n._v("为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度。降低原来单个服务器的压力。\n"),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/03/image-32f6aab626074ac99069d02e74c32873.png",alt:"image.png"}})]),n._v(" "),a("h1",{attrs:{id:"第-2-章-nginx-安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第-2-章-nginx-安装"}},[n._v("#")]),n._v(" 第 2 章 Nginx 安装")]),n._v(" "),a("h2",{attrs:{id:"_2-1-进入-nginx-官网-下载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-进入-nginx-官网-下载"}},[n._v("#")]),n._v(" 2.1 进入 nginx 官网，下载")]),n._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/03/image-b45f9f2b4a134f99b2ba6204357732c3.png",alt:"image.png"}})]),n._v(" "),a("h2",{attrs:{id:"_2-2-安装-nginx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-安装-nginx"}},[n._v("#")]),n._v(" 2.2 安装 nginx")]),n._v(" "),a("ul",[a("li",[n._v("第一步，安装 pcre （联网下载压缩包的方式）\nwget http://downloads.sourceforge.net/project/pcre/pcre/8.37/pcre-8.37.tar.gz\n解压文件，\n./configure 完成后，回到 pcre 目录下执行 make，\n再执行 make install")]),n._v(" "),a("li",[n._v("第二步，安装 openssl")]),n._v(" "),a("li",[n._v("第三步，安装 zlib\nyum -y install make zlib zlib-devel gcc-c++ libtool openssl openssl-devel\n"),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/03/image-3498aced919c4fa1b3ad8858bdb69020.png",alt:"image.png"}}),n._v("\n第四步，安装 nginx\n1、 解压缩 nginx-xx.tar.gz 包。\n2、 进入解压缩目录，执行./configure。\n3、 make && make install（编译和运行）\n查看开放的端口号（Linux是默认是 开着防火墙的 需要开放端口）\nfirewall-cmd --list-all（注意空格）\n"),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/03/image-1555f5174aeb43bcbe96940e1cbd7bcd.png",alt:"image.png"}}),n._v("\n设置开放的端口号\nfirewall-cmd --add-service=http –permanent\nsudo firewall-cmd --add-port=80/tcp --permanent\n重启防火墙\nfirewall-cmd –reload")])]),n._v(" "),a("h1",{attrs:{id:"第-3-章-nginx-常用的命令和配置文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第-3-章-nginx-常用的命令和配置文件"}},[n._v("#")]),n._v(" 第 3 章 nginx 常用的命令和配置文件")]),n._v(" "),a("h2",{attrs:{id:"_3-1-nginx-常用的命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-nginx-常用的命令"}},[n._v("#")]),n._v(" 3.1 nginx 常用的命令：")]),n._v(" "),a("p",[n._v("（1）启动命令\n在/usr/local/nginx/sbin 目录下执行 ./nginx\n（2）关闭命令\n在/usr/local/nginx/sbin 目录下执行 ./nginx -s stop\n"),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/03/image-ec06a95d846a45378065eaa0ba083a28.png",alt:"image.png"}}),n._v(" "),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/03/image-e9f901344333473e96f1796594b217fb.png",alt:"image.png"}})]),n._v(" "),a("h2",{attrs:{id:"nginx-的配置文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx-的配置文件"}},[n._v("#")]),n._v(" Nginx 的配置文件")]),n._v(" "),a("h3",{attrs:{id:"_1、nginx-配置文件位置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、nginx-配置文件位置"}},[n._v("#")]),n._v(" 1、nginx 配置文件位置")]),n._v(" "),a("p",[n._v("cd /usr/local/nginx/conf/nginx.conf\n"),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/03/image-6fd1aaf1429340d884cb91ae1619f138.png",alt:"image.png"}}),n._v(" "),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/03/image-df3f13ee3604445e839fdf7aa2948bcc.png",alt:"image.png"}})]),n._v(" "),a("h3",{attrs:{id:"_2、配置文件中的内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、配置文件中的内容"}},[n._v("#")]),n._v(" 2、配置文件中的内容")]),n._v(" "),a("p",[n._v("包含三部分内容\n"),a("strong",[n._v("（1）全局块")]),n._v("：配置服务器整体运行的配置指令\n比如 worker_processes 1;处理并发数的配置\n"),a("strong",[n._v("（2）events 块")]),n._v("：影响 Nginx 服务器与用户的网络连接\n比如 worker_connections 1024; 支持的最大连接数为 1024\n"),a("strong",[n._v("（3）http 块")]),n._v("\n还包含两部分：\nhttp 全局块\nserver 块")]),n._v(" "),a("h3",{attrs:{id:"nginx-配置实例-反向代理实例-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx-配置实例-反向代理实例-1"}},[n._v("#")]),n._v(" Nginx 配置实例-反向代理实例 1")]),n._v(" "),a("p",[n._v("1、实现效果\n（1）打开浏览器，在浏览器地址栏输入地址 www.123.com，跳转到 liunx 系统 tomcat 主页\n面中\n2、准备工作\n（1）在 liunx 系统安装 tomcat，使用默认端口 8080")]),n._v(" "),a("ul",[a("li",[n._v("tomcat 安装文件放到 liunx 系统中，解压")]),n._v(" "),a("li",[n._v("进入 tomcat 的 bin 目录中，./startup.sh 启动 tomcat 服务器\n（2）对外开放访问的"),a("strong",[n._v("端口")]),n._v("\nfirewall-cmd --add-port=8080/tcp --permanent\nfirewall-cmd –reload\n查看已经开放的端口号\nfirewall-cmd --list-all\n（3）在 windows 系统中通过"),a("strong",[n._v("浏览器")]),n._v("访问 tomcat 服务器\n当输入一个 Ip地址的时候（默认访问 80端口） 就是 用nginx 来监听 80端口\n然后 根据url 来转发；\n"),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/03/image-bdb12bb3fdce4b33a21fdd623a40bcc9.png",alt:"image.png"}}),n._v(" "),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/03/image-0c0665dd935649b58478adc01eb2c7f1.png",alt:"image.png"}})])]),n._v(" "),a("h3",{attrs:{id:"nginx-配置实例-反向代理实例-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx-配置实例-反向代理实例-2"}},[n._v("#")]),n._v(" Nginx 配置实例-反向代理实例 2")]),n._v(" "),a("p",[n._v("1、实现效果\n使用 nginx 反向代理，根据访问的路径跳转到不同端口的服务中\nnginx 监听端口为 9001，\n访问 http://192.168.17.129:9001/edu/ 直接跳转到 127.0.0.1:8080\n访问 http:// 192.168.17.129:9001/vod/ 直接跳转到 127.0.0.1:8081 2、准备工作\n（1）准备两个 tomcat 服务器，一个 8080 端口，一个 8081 端口\n（2）创建文件夹和测试页面\n3、具体配置\n（1）找到 nginx 配置文件，进行反向代理配置\n"),a("img",{attrs:{src:"5",alt:"image.png"}}),n._v(" "),a("img",{attrs:{src:"6",alt:"image.png"}}),n._v(" "),a("img",{attrs:{src:"7",alt:"image.png"}}),n._v(" "),a("img",{attrs:{src:"8",alt:"image.png"}}),n._v("可以进行筛选 进行不同的跳转你\n"),a("img",{attrs:{src:"9",alt:"image.png"}}),n._v(" "),a("img",{attrs:{src:"10",alt:"image.png"}}),n._v(" "),a("img",{attrs:{src:"11",alt:"image.png"}})]),n._v(" "),a("h2",{attrs:{id:"nginx-配置实例-负载均衡"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx-配置实例-负载均衡"}},[n._v("#")]),n._v(" Nginx 配置实例-负载均衡")]),n._v(" "),a("h3",{attrs:{id:"_1、实现效果"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、实现效果"}},[n._v("#")]),n._v(" 1、实现效果")]),n._v(" "),a("p",[n._v("（1）浏览器地址栏输入地址 http://192.168.17.129/edu/a.html，负载均衡效果，平均 8080 和 8081 端口中")]),n._v(" "),a("h3",{attrs:{id:"_2、准备工作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、准备工作"}},[n._v("#")]),n._v(" 2、准备工作")]),n._v(" "),a("p",[n._v("（1）准备两台 tomcat 服务器，一台 8080，一台 8081\n（2）在两台 tomcat 里面 webapps 目录中，创建名称是 edu 文件夹，在 edu 文件夹中创建\n页面 a.html，用于测试")]),n._v(" "),a("h3",{attrs:{id:"_3、在-nginx-的配置文件中进行负载均衡的配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、在-nginx-的配置文件中进行负载均衡的配置"}},[n._v("#")]),n._v(" 3、在 nginx 的配置文件中进行负载均衡的配置")]),n._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/03/image-8b79f5e5636b478eb36ad71e3d9814be.png",alt:"image.png"}})]),n._v(" "),a("h3",{attrs:{id:"_4、nginx-分配服务器策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、nginx-分配服务器策略"}},[n._v("#")]),n._v(" 4、nginx 分配服务器策略")]),n._v(" "),a("p",[n._v("第一种 轮询（默认）\n每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器 down 掉，能自动剔除。\n第二种 weight\nweight 代表权重默认为 1,权重越高被分配的客户端越多\n第三种 ip_hash\n每个请求按访问 ip 的 hash 结果分配，这样每个访客固定访问一个后端服务器\n第四种 fair（第三方）\n按后端服务器的响应时间来分配请求，响应时间短的优先分配。")]),n._v(" "),a("h2",{attrs:{id:"nginx-配置实例-动静分离"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx-配置实例-动静分离"}},[n._v("#")]),n._v(" Nginx 配置实例-动静分离")]),n._v(" "),a("p",[n._v("1、什么是动静分离\n"),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/03/image-bd921c6da09641d187987eb37446d0e5.png",alt:"image.png"}}),n._v("\n通过 location 指定不同的"),a("strong",[n._v("后缀名")]),n._v("实现不同的"),a("strong",[n._v("请求转发")]),n._v("。通过 "),a("strong",[n._v("expires "),a("strong",[n._v("参数设置，可以使浏览器缓存")]),n._v("过期时间")]),n._v("，减少与服务器之前的请求和流量。具体 Expires 定义：是给一个资源\n设定一个过期时间，也就是说无需去服务端验证，直接通过浏览器自身确认是否过期即可，所以不会产生额外的流量。此种方法非常适合不经常变动的资源。（如果经常更新的文件，不建议使用 Expires 来缓存），我这里设置 3d，表示在这 3 天之内访问这个 URL，发送一\n个请求，比对服务器该文件"),a("strong",[n._v("最后更新时间没有变化")]),n._v("，则不会从服务器抓取，返回状态码** 304**，如果有修改，则直接从服务器重新下载，返回状态码 200。\n2、准备工作\n（1）在 liunx 系统中准备静态资源，用于进行访问\n"),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/03/image-8a34d8d9f4644a05982f08a30f25a45d.png",alt:"image.png"}}),n._v("\n3、具体配置\n（1）在 nginx 配置文件中进行配置\n"),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/03/image-83ee1facdd484ff3a71312130bb6b10e.png",alt:"image.png"}}),n._v("\n4、最终测试\n（1）浏览器中输入地址\nhttp://192.168.17.129/image/01.jpg")]),n._v(" "),a("ul",[a("li",[n._v("因为配置文件 autoindex on\n"),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/03/image-219421a6c6454ed4bac6d24a714c796d.png",alt:"image.png"}}),n._v("\n（2）在浏览器地址栏输入地址\nhttp://192.168.17.129/www/a.html\n"),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/03/image-31bed2a605704f2baed5e3f555de9ab9.png",alt:"image.png"}})])]),n._v(" "),a("h2",{attrs:{id:"nginx-配置高可用的集群"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx-配置高可用的集群"}},[n._v("#")]),n._v(" Nginx 配置高可用的集群")]),n._v(" "),a("p",[n._v("1、什么是 nginx 高可用\n"),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/03/image-37c2a8590113404ab52e62541b74cf3e.png",alt:"image.png"}}),n._v("\n（1）需要两台 nginx 服务器\n（2）需要 keepalived\n（3）需要虚拟 ip\n2、配置高可用的准备工作\n（1）需要两台服务器 192.168.17.129 和 192.168.17.131\n（2）在两台服务器安装 nginx\n（3）在两台服务器安装 keepalived")]),n._v(" "),a("h3",{attrs:{id:"nginx-的原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx-的原理"}},[n._v("#")]),n._v(" Nginx 的原理")]),n._v(" "),a("p",[n._v("1、mater 和 worker\n"),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/03/image-4bf96d787fd94d6795cbcd67a2487f11.png",alt:"image.png"}}),n._v("\n2、worker 如何进行工作的\n"),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/03/image-dbbd5333ea574558af8e8c465bc290a0.png",alt:"image.png"}}),n._v("\n3、一个 master 和多个 woker 有好处\n（1）可以使用 nginx –s reload 热部署，利用 nginx 进行热部署操作\n（2）每个 woker 是独立的进程，如果有其中的一个 woker 出现问题，其他 woker 独立的，\n继续进行争抢，实现请求过程，不会造成服务中断\n4、设置多少个 woker 合适\nworker 数和服务器的 cpu 数相等是最为适宜的\n5、连接数 worker_connection\n第一个：发送请求，占用了 woker 的几个连接数？\n答案：2 或者 4 个\n第二个：nginx 有一个 master，有四个 woker，每个 woker 支持最大的连接数 1024，支持的")]),n._v(" "),a("h4",{attrs:{id:"最大并发数是多少"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最大并发数是多少"}},[n._v("#")]),n._v(" 最大并发数是多少？")]),n._v(" "),a("p",[n._v("普通的静态访问最大并发数是： worker_connections * worker_processes 2， 而如果是 HTTP 作 为反向代理来说，最大并发数量应该是 worker_connections * worker_processes/4。")]),n._v(" "),a("h4",{attrs:{id:"遇到的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#遇到的问题"}},[n._v("#")]),n._v(" 遇到的问题")]),n._v(" "),a("p",[n._v("nginx指定文件路径有两种方式root和alias，指令的使用方法和作用域：\n[root]\n语法：root path\n默认值：root html\n配置段：http、server、location、if\n[alias]\n语法：alias path\n配置段：location")]),n._v(" "),a("p",[n._v("root与alias主要区别在于nginx如何解释location后面的uri，这会使两者分别以不同的方式将请求映射到服务器文件上。\nroot的处理结果是："),a("strong",[n._v("root路径＋location路径")]),n._v("\nalias的处理结果是："),a("strong",[n._v("使用alias路径替换location路径")]),n._v("\nalias是一个目录别名的定义，root则是最上层目录的定义。\n还有一个重要的区别是alias后面必须要用“/”结束，否则会找不到文件的。。。而root则可有可无~~")]),n._v(" "),a("p",[n._v("root实例：")]),n._v(" "),a("div",{staticClass:"language-location ^~ /t/ { line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("     root /www/root/html/;\n}\n\nlocation ^~ /t/ {\n     root /www/root/html/;\n}\n\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br")])]),a("p",[n._v("如果一个请求的URI是/t/a.html时，web服务器将会返回服务器上的/www/root/html/t/a.html的文件。")]),n._v(" "),a("p",[n._v("alias实例：")]),n._v(" "),a("div",{staticClass:"language-location ^~ /t/ { line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v(" alias /www/root/html/new_t/;\n}\n\nlocation ^~ /t/ {\n alias /www/root/html/new_t/;\n}\n\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br")])]),a("p",[n._v("如果一个请求的URI是/t/a.html时，web服务器将会返回服务器上的/www/root/html/new_t/a.html的文件。注意这里是new_t，因为alias会把location后面配置的路径丢弃掉，把当前匹配到的目录指向到指定的目录。")]),n._v(" "),a("p",[n._v("注意：")]),n._v(" "),a("ol",[a("li",[n._v('使用alias时，目录名后面一定要加"/"。')]),n._v(" "),a("li",[n._v("alias在使用正则匹配时，必须捕捉要匹配的内容并在指定的内容处使用。")]),n._v(" "),a("li",[n._v("alias只能位于location块中。（root可以不放在location中）")])])])}),[],!1,null,null,null);t.default=r.exports}}]);