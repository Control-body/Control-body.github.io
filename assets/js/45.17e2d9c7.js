(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{442:function(t,a,s){"use strict";s.r(a);var n=s(56),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h4",{attrs:{id:"问题一-得到一个数字的32位表示方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#问题一-得到一个数字的32位表示方式"}},[t._v("#")]),t._v(" 问题一: 得到一个数字的32位表示方式:")]),t._v(" "),s("p",[t._v("int 型 4个字节(32位) double 8个字节(64位) 每个字节8位\n"),s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/04/image-0421ec233bd042eb9b487ba520b03b23.png",alt:"image.png"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/04/image-b6f0f09df87a4139b743d023e993f83a.png",alt:"image.png"}})]),t._v(" "),s("p",[t._v("每个数字 实际存储的 值都是一个二进制数字;")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("左移: 左移都是不带符号的,右移有带符号的;\n"),s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/04/image-fd15eb56649c49058d132e9a56584f3c.png",alt:"image.png"}})])]),t._v(" "),s("li",[s("p",[t._v("反码\n有符号整型:2的31次方-1   (java中)\n无复数整形:2的31次方-1   (c++中)\n"),s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/04/image-e65f664872ca4ce483cb3873e27814eb.png",alt:"image.png"}})])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/04/image-8cd6333c50b349e5b58e2ed6750a1bc2.png",alt:"image.png"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/04/image-462c4657dc5f4b92a518d33cd908eb0b.png",alt:"image.png"}}),t._v("\n最小的数字是:\n"),s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/04/image-f416cdf7c6db45d2ab7acf9dd0c784ed.png",alt:"image.png"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/04/image-2fa1b574aadf4891b786fb2c4638c384.png",alt:"image.png"}})]),t._v(" "),s("h4",{attrs:{id:"问题二-负数为啥要取反加一"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#问题二-负数为啥要取反加一"}},[t._v("#")]),t._v(" 问题二: 负数为啥要取反加一?")]),t._v(" "),s("p",[t._v("算数符号 + - * / 都是二进制表示,用位运算来表示;\n为了使用一个逻辑门去计算,让计算加快,")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("补码")])]),t._v(" "),s("li",[s("p",[t._v("右移:\n带符号右移     和  不带符号有移")])])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("符号位来补"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 和 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>>")]),t._v(" \n\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("系统最小值  的相反数 (取反加1) 还是他自己;")]),t._v(" "),s("h1",{attrs:{id:"算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算法"}},[t._v("#")]),t._v(" 算法")]),t._v(" "),s("p",[t._v("1.具体的问题\n2.设置的具体流程\n3.评价流程的方式 (空间复杂度 时间复杂度)")]),t._v(" "),s("h2",{attrs:{id:"算法的分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算法的分类"}},[t._v("#")]),t._v(" 算法的分类")]),t._v(" "),s("ol",[s("li",[t._v("明确知道则么算的流程")]),t._v(" "),s("li",[t._v("明确知道则么试的流程")])]),t._v(" "),s("h3",{attrs:{id:"排序算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#排序算法"}},[t._v("#")]),t._v(" 排序算法")]),t._v(" "),s("ul",[s("li",[t._v("选择排序")])]),t._v(" "),s("p",[t._v("遍历所有找出最小放在第一位,然后在第二位开始 向后找最小的,放在第二位,依次进行;\n"),s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/04/image-2ba32576b60543c49ff710bf84bc63a7.png",alt:"image.png"}})]),t._v(" "),s("ul",[s("li",[t._v("冒泡排序\n"),s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/04/image-091551a1656e4a099eb9c873d2738fa5.png",alt:"image.png"}})])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/04/image-b4270e923c4042a1afe4f1137a508025.png",alt:"image.png"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/04/image-3f39a752ac0b4a7e98cfe980374b90b9.png",alt:"image.png"}})]),t._v(" "),s("ul",[s("li",[t._v("插入排序")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/04/image-831977e290a641d8b48cb1bbd7010a80.png",alt:"image.png"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/04/image-c358f76c641945bda0c81c54fc35c8e7.png",alt:"image.png"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/04/image-db6ef5c809c14faa857f7dec27a55608.png",alt:"image.png"}})]),t._v(" "),s("h1",{attrs:{id:"算法和数据结构新手班"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算法和数据结构新手班"}},[t._v("#")]),t._v(" 算法和数据结构新手班")]),t._v(" "),s("h2",{attrs:{id:"_01-位运算、算法是什么、介绍位运算和简单排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_01-位运算、算法是什么、介绍位运算和简单排序"}},[t._v("#")]),t._v(" 01 位运算、算法是什么、介绍位运算和简单排序")]),t._v(" "),s("p",[t._v("内容：")]),t._v(" "),s("p",[t._v("讲解二进制、位运算")]),t._v(" "),s("p",[t._v("介绍什么是算法")]),t._v(" "),s("p",[t._v("讲解冒泡、选择、插入排序")]),t._v(" "),s("p",[t._v("题目：")]),t._v(" "),s("p",[t._v("实现打印一个整数的二进制")]),t._v(" "),s("p",[t._v("给定一个参数N，返回1!+2!+3!+4!+…+N!的结果")]),t._v(" "),s("h3",{attrs:{id:"_1-实现冒泡排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-实现冒泡排序"}},[t._v("#")]),t._v(" 1.实现冒泡排序")]),t._v(" "),s("p",[t._v("只比较相邻的两个进行比较，如果小（大）于就换 第一次只会让 一个正确的数字归位；每次归位一个，遍历循环 arr.length-1 次就可以了；")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BubbleSortFunction")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//        for (int end = arr.length - 1; end > 0; end--) {")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//            for (int i = 0; i < end; i++) {")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//                if (arr[i] > arr[i + 1]) {")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//                    swap(arr, i, i + 1);")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//                }")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//            }")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//        }")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//       for (int i=arr.length-1 ; i>0 ; i--){")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//           for (int j=0 ; j < i ; j++){")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//               if (arr[j]>arr[j+1]){")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//                   swap(arr,j,j+1);")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//               }")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//           }")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//        }")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n           "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n               "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("swap")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n               "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n           "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br")])]),s("h3",{attrs:{id:"_2-实现选择排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-实现选择排序"}},[t._v("#")]),t._v(" 2.实现选择排序")]),t._v(" "),s("p",[t._v("选择排序是遍历完整数组，每次遍历 找出最值 放到他 正确的位置，遍历arr.length-1 次就可以了；")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("selectFunction")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" arrayLength"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("arrayLength"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" minIndex"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("arrayLength"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("minIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    minIndex"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("swap")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("minIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br")])]),s("h3",{attrs:{id:"_3-实现插入排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-实现插入排序"}},[t._v("#")]),t._v(" 3.实现插入排序")]),t._v(" "),s("p",[t._v("插入排序 好比 左手拿着一张扑克牌，然后数组在右手，先把 0 放到左手，\n开始循环 每次拿一个 右手的数组值，和左手的进行比较 让左手的 变成有序的，最终返回左手排好序的数组；")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("insertionSort")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("swap")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),s("h2",{attrs:{id:"_02-数据结构的大分类、介绍前缀和与对数器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_02-数据结构的大分类、介绍前缀和与对数器"}},[t._v("#")]),t._v(" 02 数据结构的大分类、介绍前缀和与对数器")]),t._v(" "),s("h3",{attrs:{id:"数据结构的分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据结构的分类"}},[t._v("#")]),t._v(" 数据结构的分类")]),t._v(" "),s("h4",{attrs:{id:"连续结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#连续结构"}},[t._v("#")]),t._v(" 连续结构：")]),t._v(" "),s("p",[t._v("（连续结构）  数组"),s("br"),t._v("\n加减困难 查找困难")]),t._v(" "),s("h4",{attrs:{id:"非连续结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#非连续结构"}},[t._v("#")]),t._v(" 非连续结构：")]),t._v(" "),s("p",[t._v("（跳转结构）  树 图等\n加减容易 查找困难")]),t._v(" "),s("p",[t._v("什么是数据结构、组成各种数据结构最基本的元件")]),t._v(" "),s("h4",{attrs:{id:"前缀和数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前缀和数组"}},[t._v("#")]),t._v(" 前缀和数组")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/04/image-2fa97d4a065142f8a2e96f20a4afdaa2.png",alt:"image.png"}})]),t._v(" "),s("h4",{attrs:{id:"随机函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#随机函数"}},[t._v("#")]),t._v(" 随机函数")]),t._v(" "),s("p",[t._v("java 中的 Math.random() 返回double 的数字 [0,1) 等概率的 返回一个 小数;")]),t._v(" "),s("h4",{attrs:{id:"对数器的使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对数器的使用"}},[t._v("#")]),t._v(" 对数器的使用")]),t._v(" "),s("p",[t._v("概率变成x平方:\n"),s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/04/image-974a43f8732d421da973a893ec474fc6.png",alt:"image.png"}})]),t._v(" "),s("h4",{attrs:{id:"题目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#题目"}},[t._v("#")]),t._v(" 题目：")]),t._v(" "),s("p",[t._v("实现前缀和数组")]),t._v(" "),s("h5",{attrs:{id:"如何用1到5的随机函数加工出1-7的随机函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何用1到5的随机函数加工出1-7的随机函数"}},[t._v("#")]),t._v(" 如何用1到5的随机函数加工出1~7的随机函数")]),t._v(" "),s("p",[t._v("如何用a~b的随机函数加工出c~d的随机函数\n"),s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/04/image-ac2c12cc92c2445ca80f33bfcf5ae93d.png",alt:"image.png"}})]),t._v(" "),s("h5",{attrs:{id:"如何把不等概率随机函数变成等概率随机函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何把不等概率随机函数变成等概率随机函数"}},[t._v("#")]),t._v(" 如何把不等概率随机函数变成等概率随机函数")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/04/image-8e8a78c17970444ba88227872778e7f6.png",alt:"image.png"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/04/image-85ad512a5063462590478e7cade5fa6d.png",alt:"image.png"}})]),t._v(" "),s("h5",{attrs:{id:"展示对数器的使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#展示对数器的使用"}},[t._v("#")]),t._v(" 展示对数器的使用")]),t._v(" "),s("h5",{attrs:{id:"引用传递和按值传递"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引用传递和按值传递"}},[t._v("#")]),t._v(" 引用传递和按值传递")]),t._v(" "),s("h6",{attrs:{id:"一、基本类型和引用类型的理解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、基本类型和引用类型的理解"}},[t._v("#")]),t._v(" 一、基本类型和引用类型的理解")]),t._v(" "),s("p",[t._v("Java中的数据类型分为两种为基本类型和引用类型。")]),t._v(" "),s("p",[t._v("1、基本类型的变量保存原始值，所以变量就是数据本身。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("常见的基本类型：byte,short,int,long,char,float,double,Boolean,returnAddress。\n")])])]),s("p",[t._v("2、引用类型的变量保存引用值，所谓的引用值就是对象所在内存空间的“首地址值”，通过对这个引用值来操作对象。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("常见的引用类型：类类型，接口类型和数组。\n")])])]),s("h6",{attrs:{id:"二、值传递和引用传递的理解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、值传递和引用传递的理解"}},[t._v("#")]),t._v(" 二、值传递和引用传递的理解")]),t._v(" "),s("p",[t._v("1、值传递\n在方法的调用过程中，实参把它的实际值传递给形参，此传递过程就是将实参的值复制一份传递到函数中，这样如果在函数中对该值（形参的值）进行了操作将不会影响实参的值。因为是直接复制，所以这种方式在传递大量数据时，运行效率会特别低下。")]),t._v(" "),s("p",[t._v("2、引用传递\n引用传递弥补了值传递的不足，如果传递的数据量很大，直接复过去的话，会占用大量的内存空间，而引用传递就是将对象的地址值传递过去，函数接收的是原始值的首地址值。在方法的执行过程中，形参和实参的内容相同，指向同一块内存地址，也就是说操作的其实都是源数据，所以方法的执行将会影响到实际对象。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/04/image-9a91e90254864980892a15f8f5801bb8.png",alt:"image.png"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/05/image-46db4bf78f05460fa07bd564a7a5829e.png",alt:"image.png"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/05/image-5d655ad3df2b40708dbddfb3d8210597.png",alt:"image.png"}})]),t._v(" "),s("h2",{attrs:{id:"_03-介绍二分法-介绍时间复杂度、动态数组、哈希表和有序表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_03-介绍二分法-介绍时间复杂度、动态数组、哈希表和有序表"}},[t._v("#")]),t._v(" 03 介绍二分法，介绍时间复杂度、动态数组、哈希表和有序表")]),t._v(" "),s("h3",{attrs:{id:"二分法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二分法"}},[t._v("#")]),t._v(" 二分法")]),t._v(" "),s("p",[t._v("二分法一定会划分到死才会结束；\n使用二分法解决不同的题目")]),t._v(" "),s("h4",{attrs:{id:"局部最小值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#局部最小值"}},[t._v("#")]),t._v(" 局部最小值")]),t._v(" "),s("p",[t._v("对数器:\n"),s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/05/image-b0c6552a5a384564a83c759ef76ce165.png",alt:"image.png"}})]),t._v(" "),s("h4",{attrs:{id:"时间复杂度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度"}},[t._v("#")]),t._v(" 时间复杂度")]),t._v(" "),s("p",[t._v("1.常数时间的操作:(和数据量无关)\n加,减,乘,除,寻址,\n只关心最高阶 系数 等都不看;\nO() 如果n接近与无穷 当 "),s("strong",[t._v("数据量很大(最难受的)")]),t._v(" 的情况下 看程序的运行优略;\n2.常见的时间复杂度\n"),s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/05/image-ea37a33e8a914b6b8da5c726334690ef.png",alt:"image.png"}})]),t._v(" "),s("h4",{attrs:{id:"动态数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#动态数组"}},[t._v("#")]),t._v(" 动态数组")]),t._v(" "),s("p",[t._v("java中的ArrayList 可以动态扩充的数组;\n"),s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/05/image-10a0c2fd7cb146358de64ff641d6ef2d.png",alt:"image.png"}})]),t._v(" "),s("ul",[s("li",[t._v("总结\n在时间复杂度上 不仅仅不会影响时间复杂度,还支持扩容;\n动态扩容一定是慢但是是常数的慢,和正常的数组差不多,还支持扩容;")])]),t._v(" "),s("p",[t._v("按值传递、按引用传递")]),t._v(" "),s("h3",{attrs:{id:"哈希表-hashmap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#哈希表-hashmap"}},[t._v("#")]),t._v(" 哈希表 HashMap")]),t._v(" "),s("p",[t._v("按值传递的,记录k-v形式的一个 表;\nput 方法 是插入也是更新操作;\n"),s("strong",[t._v("哈希表的增删改查都是一个常数时间")]),t._v("时间较长;\n哈希表不管你是不是 一个对象, 只看内容;\ndouble 和 int flout 等原生类型 都是值传递;\n非原生类型: 按照引用类型传递；只关心内存地址；\n"),s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/05/image-3b10057457b24d7bab49ca6ad0b9125e.png",alt:"image.png"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/05/image-59b46414a6294510bf5dc4c262e634fe.png",alt:"image.png"}})]),t._v(" "),s("h3",{attrs:{id:"有序表-treemap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#有序表-treemap"}},[t._v("#")]),t._v(" 有序表 TreeMap")]),t._v(" "),s("p",[t._v("功能更加强大比 hashMap\n"),s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/05/image-fe1efca38a0f488994ef80c4db24d9ce.png",alt:"image.png"}})]),t._v(" "),s("p",[t._v("treeMap 是 O(logn) 比hashMap 要慢一点;\ntreeMap是按照key 去比较的,想用TreeMap 必须是可以比较的,否则不能装进TreeMap;\n题目：")]),t._v(" "),s("p",[t._v("有序数组中找到num")]),t._v(" "),s("p",[t._v("有序数组中找到>=num最左的位置")]),t._v(" "),s("p",[t._v("有序数组中找到<=num最右的位置")]),t._v(" "),s("p",[t._v("局部最小值问题")]),t._v(" "),s("p",[t._v("哈希表HashMap使用的code讲解")]),t._v(" "),s("p",[t._v("有序表TreeMap使用的code讲解")]),t._v(" "),s("h2",{attrs:{id:"_04-链表相关的简单面试题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_04-链表相关的简单面试题"}},[t._v("#")]),t._v(" 04 链表相关的简单面试题")]),t._v(" "),s("h3",{attrs:{id:"数据结构只分为两种"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据结构只分为两种"}},[t._v("#")]),t._v(" 数据结构只分为两种:")]),t._v(" "),s("ul",[s("li",[t._v("连续结构的")]),t._v(" "),s("li",[t._v("跳转结构的")])]),t._v(" "),s("h3",{attrs:{id:"单双链表的定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单双链表的定义"}},[t._v("#")]),t._v(" 单双链表的定义:")]),t._v(" "),s("p",[t._v("单链表: 值 一条next指针\n双链表: 值 一条last 和一条 next指针;")]),t._v(" "),s("h4",{attrs:{id:"问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#问题"}},[t._v("#")]),t._v(" 问题:")]),t._v(" "),s("p",[t._v("null 在虚拟机 里面也是一个内存地址;")]),t._v(" "),s("h5",{attrs:{id:"反转单链表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#反转单链表"}},[t._v("#")]),t._v(" 反转单链表")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/05/image-2ed2d149bd6843e7a2146bfb298e0b71.png",alt:"image.png"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/05/image-c47a9917a18d46a78543981612e4fbe1.png",alt:"image.png"}})]),t._v(" "),s("h5",{attrs:{id:"反转双链表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#反转双链表"}},[t._v("#")]),t._v(" 反转双链表")]),t._v(" "),s("h3",{attrs:{id:"栈、队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#栈、队列"}},[t._v("#")]),t._v(" 栈、队列")]),t._v(" "),s("p",[t._v("排队拉屎,站着吐;")]),t._v(" "),s("h4",{attrs:{id:"_1-栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-栈"}},[t._v("#")]),t._v(" 1.栈:")]),t._v(" "),s("p",[t._v("弹夹 先进后出\n"),s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/05/image-eed1e49d065544eb8d6130c589acad90.png",alt:"image.png"}}),t._v("\n(1) 压入栈\n"),s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/05/image-1fc18be468c843ea8563c9c7f9315026.png",alt:"image.png"}}),t._v("\n(2)弹出栈\n"),s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/05/image-b60484220d444c129b02a2e8aa50acc5.png",alt:"image.png"}})]),t._v(" "),s("h4",{attrs:{id:"_2-队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-队列"}},[t._v("#")]),t._v(" 2.队列:")]),t._v(" "),s("p",[t._v("拉屎 先进先出"),s("br"),t._v(" "),s("strong",[t._v("单链表")]),t._v(" 实现;\n功能:\n"),s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/05/image-4c9d71aab66d47398d4aba16892386f3.png",alt:"image.png"}}),t._v("\n(1) 进入队列:\n"),s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/05/image-95d62cda665348ee8c0de77caa3ad9bd.png",alt:"image.png"}}),t._v("\n(2) 弹出队列:\n"),s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/05/image-29c7945b7bcc4d6aa8f5c4bc5f55ecc4.png",alt:"image.png"}}),t._v("\n如果最后不修改 tail  会让最后一个数据成为一个脏数据;")]),t._v(" "),s("h3",{attrs:{id:"双端队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#双端队列"}},[t._v("#")]),t._v(" 双端队列")]),t._v(" "),s("p",[t._v("可以 头尾都支持 插入和弹出的操作;")]),t._v(" "),s("h4",{attrs:{id:"_1-单链表不能支持双端队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-单链表不能支持双端队列"}},[t._v("#")]),t._v(" (1)单链表不能支持双端队列;")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/05/image-edd9643975974d1c8a82c3572c74dec0.png",alt:"image.png"}})]),t._v(" "),s("h4",{attrs:{id:"_2-用双链表实现双端队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-用双链表实现双端队列"}},[t._v("#")]),t._v(" (2)用双链表实现双端队列")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/05/image-6cf5c79150264d078983d143814c4f64.png",alt:"image.png"}}),t._v(" "),s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/05/image-902f8c13702846b8acb8adaac90623cf.png",alt:"image.png"}})]),t._v(" "),s("h3",{attrs:{id:"k个节点的组内逆序调整问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#k个节点的组内逆序调整问题"}},[t._v("#")]),t._v(" K个节点的组内逆序调整问题：")]),t._v(" "),s("p",[t._v("测试链接：https://leetcode.com/problems/reverse-nodes-in-k-group/\n"),s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/05/image-f7fe2515b1b54cba9bbed707512c8095.png",alt:"image.png"}}),t._v("\n给定一个单链表的头节点head，和一个正数k\n实现k个节点的小组内部逆序，如果最后一组不够k个就不调整\n例子:\n调整前：1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7 -> 8，k = 3\n调整后：3 -> 2 -> 1 -> 6 -> 5 -> 4 -> 7 -> 8")]),t._v(" "),s("h4",{attrs:{id:"方法一-getkgroupend"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法一-getkgroupend"}},[t._v("#")]),t._v(" 方法一:getKGroupEnd")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/05/image-d8962e4e667d4c7a88afa6b18a5ca57e.png",alt:"image.png"}})]),t._v(" "),s("h4",{attrs:{id:"方法二-reverse"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法二-reverse"}},[t._v("#")]),t._v(" 方法二 reverse")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/05/image-edc27c55a5a44518931934638604e703.png",alt:"image.png"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/05/image-720933b6e35d43cd9c16475d123d386f.png",alt:"image.png"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/05/image-d4f3b96580c84579b87880eb7a94bdb0.png",alt:"image.png"}})]),t._v(" "),s("h3",{attrs:{id:"两个链表相加问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#两个链表相加问题"}},[t._v("#")]),t._v(" 两个链表相加问题")]),t._v(" "),s("p",[t._v("先找到 长短链表; 分三种情况; 长短都有 ; 长有短没有; 长短 都没有;\n给定两个链表的头节点head1和head2，\n认为从左到右是某个数字从低位到高位，返回相加之后的链表\n例子     4 -> 3 -> 6        2 -> 5 -> 3\n返回     6 -> 8 -> 9\n解释     634 + 352 = 986")]),t._v(" "),s("h3",{attrs:{id:"两个有序链表的合并"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#两个有序链表的合并"}},[t._v("#")]),t._v(" 两个有序链表的合并")]),t._v(" "),s("p",[t._v("给定两个有序链表的头节点head1和head2，\n返回合并之后的大链表，要求依然有序\n例子     1 -> 3 -> 3 -> 5 -> 7   2 -> 2 -> 3 -> 3-> 7\n返回     1 -> 2 -> 2 -> 3 -> 3 -> 3 -> 3 -> 5 -> 7")]),t._v(" "),s("h2",{attrs:{id:"_05-位图、位运算实现加减乘除"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_05-位图、位运算实现加减乘除"}},[t._v("#")]),t._v(" 05 位图、位运算实现加减乘除")]),t._v(" "),s("p",[t._v("内容：")]),t._v(" "),s("p",[t._v("位图")]),t._v(" "),s("p",[t._v("位运算使用的进一步学习：实现加减乘除")]),t._v(" "),s("p",[t._v("题目：")]),t._v(" "),s("p",[t._v("现场写位图的code、讲解")]),t._v(" "),s("p",[t._v("位运算的加减乘除")]),t._v(" "),s("h2",{attrs:{id:"_06-比较器、优先级队列、二叉树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_06-比较器、优先级队列、二叉树"}},[t._v("#")]),t._v(" 06 比较器、优先级队列、二叉树")]),t._v(" "),s("p",[t._v("内容：")]),t._v(" "),s("p",[t._v("比较器")]),t._v(" "),s("p",[t._v("优先级队列")]),t._v(" "),s("p",[t._v("二叉树的基本遍历")]),t._v(" "),s("p",[t._v("二叉树的递归套路")]),t._v(" "),s("p",[t._v("题目：")]),t._v(" "),s("p",[t._v("补充了一个链表的题目\n合并多个有序链表\nLeetcode原题，https://leetcode.com/problems/merge-k-sorted-lists")]),t._v(" "),s("p",[t._v("判断两颗树是否结构相同\nLeetcode原题，https://leetcode.com/problems/same-tree")]),t._v(" "),s("p",[t._v("判断一棵树是否是镜面树\nLeetcode原题，https://leetcode.com/problems/symmetric-tree")]),t._v(" "),s("p",[t._v("返回一棵树的最大深度\nLeetcode原题，https://leetcode.com/problems/maximum-depth-of-binary-tree")]),t._v(" "),s("p",[t._v("用先序数组和中序数组重建一棵树\nLeetcode原题，https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal")]),t._v(" "),s("p",[t._v("用code展示比较器的使用")]),t._v(" "),s("p",[t._v("二叉树先序、中序、后序遍历的代码实现、介绍递归序")]),t._v(" "),s("h2",{attrs:{id:"_07-继续二叉树的很多题目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_07-继续二叉树的很多题目"}},[t._v("#")]),t._v(" 07 继续二叉树的很多题目")]),t._v(" "),s("p",[t._v("内容：")]),t._v(" "),s("p",[t._v("进一步讲解二叉树题目，来熟悉二叉树")]),t._v(" "),s("p",[t._v("题目：")]),t._v(" "),s("p",[t._v("二叉树按层遍历并收集节点\nLeetcode原题，https://leetcode.com/problems/binary-tree-level-order-traversal-ii")]),t._v(" "),s("p",[t._v("判断是否是平衡搜索二叉树\nLeetcode原题，https://leetcode.com/problems/balanced-binary-tree")]),t._v(" "),s("p",[t._v("在二叉树上能否组成路径和\nLeetcode原题，https://leetcode.com/problems/path-sum")]),t._v(" "),s("p",[t._v("在二叉树上收集所有达标的路径和\nLeetcode原题，https://leetcode.com/problems/path-sum-ii")]),t._v(" "),s("p",[t._v("判断二叉树是否是搜索二叉树")]),t._v(" "),s("h2",{attrs:{id:"_08-介绍归并排序和快速排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_08-介绍归并排序和快速排序"}},[t._v("#")]),t._v(" 08 介绍归并排序和快速排序")]),t._v(" "),s("p",[t._v("内容：")]),t._v(" "),s("p",[t._v("讲解一个位运算的题目")]),t._v(" "),s("p",[t._v("归并排序")]),t._v(" "),s("p",[t._v("快速排序")]),t._v(" "),s("p",[t._v("题目：")]),t._v(" "),s("p",[t._v("不要用任何比较判断，返回两个数中较大的数")]),t._v(" "),s("p",[t._v("归并排序的递归实现和非递归实现")]),t._v(" "),s("p",[t._v("快速排序的递归实现和非递归实现")])])}),[],!1,null,null,null);a.default=r.exports}}]);