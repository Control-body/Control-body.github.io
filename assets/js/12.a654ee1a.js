(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{411:function(a,t,s){"use strict";s.r(t);var r=s(56),n=Object(r.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"一、预备知识-程序的内存分配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、预备知识-程序的内存分配"}},[a._v("#")]),a._v(" 一、预备知识—程序的内存分配")]),a._v(" "),s("p",[a._v("一个由c/C++编译的程序占用的内存分为以下几个部分\n1、栈区（stack）—------- 由编译器"),s("strong",[a._v("自动分配释放")]),a._v(" ，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。\n2、堆区（heap） —------ 一般由程序员"),s("strong",[a._v("分配释放")]),a._v("， 若程序员不释放，**程序结束时可能由 OS **回收 。注意它与数据结构中的堆是两回事，分配方式倒是类似于链表，呵呵。\n3、全局区（静态区）（static）—-------，"),s("strong",[a._v("全局变量和静态变量 static")]),a._v("的存储是放在一块的，初始化的全局变量和静态变量在一块区域， 未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。 - 程序结束后有系统释放\n4、文字常量区—------常量字符串就是放在这里的。 程序结束后由系统释放\n5、程序代码区—------存放函数体的二进制代码。\n"),s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/05/image-aea776ced07d48f3a8703e3cae8691ea.png",alt:"image.png"}})]),a._v(" "),s("h2",{attrs:{id:"二、堆和栈的理论知识"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、堆和栈的理论知识"}},[a._v("#")]),a._v(" 二、堆和栈的理论知识")]),a._v(" "),s("h3",{attrs:{id:"_2-1申请方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1申请方式"}},[a._v("#")]),a._v(" 2.1申请方式")]),a._v(" "),s("h4",{attrs:{id:"stack-栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stack-栈"}},[a._v("#")]),a._v(" stack: （栈）")]),a._v(" "),s("p",[a._v("由系统自动分配。 例如，声明在函数中一个局部变量 int b; 系统自动在栈中为b开辟空间")]),a._v(" "),s("h4",{attrs:{id:"heap-堆"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#heap-堆"}},[a._v("#")]),a._v(" heap: （堆）")]),a._v(" "),s("p",[a._v("需要程序员自己申请，并指明大小，在c中malloc函数\n如p1 = (char *)malloc(10);\n在C++中用new运算符\n如p2 = (char *)malloc(10);\n但是注意p1、p2本身是在栈中的。但是值的位置是在堆中")]),a._v(" "),s("h3",{attrs:{id:"_2-2-申请后系统的响应"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-申请后系统的响应"}},[a._v("#")]),a._v(" 2.2 申请后系统的响应")]),a._v(" "),s("h4",{attrs:{id:"栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#栈"}},[a._v("#")]),a._v(" "),s("strong",[a._v("栈")]),a._v("：")]),a._v(" "),s("p",[a._v("只要栈的剩余空间大于所申请空间，系统将为程序提供内存，否则将报异常"),s("strong",[a._v("提示栈溢出")]),a._v("。")]),a._v(" "),s("h4",{attrs:{id:"堆"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆"}},[a._v("#")]),a._v(" "),s("strong",[a._v("堆")]),a._v("：")]),a._v(" "),s("p",[a._v("首先应该知道操作系统有一个"),s("strong",[a._v("记录空闲内存地址的链表")]),a._v("，当系统收到程序的申请时，会遍历该链表，寻找第一个空间大于所申请空间的堆结点，然后将该结点从空闲结点链表中删除，并将该结点的空"),s("strong",[a._v("间分配给程序")]),a._v("，另外，对于大多数系统，会在这块内存空间中的"),s("strong",[a._v("首地址处记录本次分配的大小")]),a._v("，这样，代码中的delete语句才能正确的释放本内存空间。另外，由于找到的堆结点的大小不一定正好等于申请的大小，系统会自动的将多余的那部分**重新放入空闲链表中。 **")]),a._v(" "),s("h3",{attrs:{id:"_2-3申请大小的限制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3申请大小的限制"}},[a._v("#")]),a._v(" 2.3申请大小的限制")]),a._v(" "),s("h4",{attrs:{id:"栈-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#栈-2"}},[a._v("#")]),a._v(" 栈：")]),a._v(" "),s("p",[a._v("在Windows下,栈是向"),s("strong",[a._v("低地址扩展的")]),a._v("数据结构，是一块连续的内存的区域。这句话的意思是"),s("strong",[a._v("栈顶的地址和栈的最大容量是系统预先规定好的")]),a._v("，在 WINDOWS下，栈的大小是2M（也有的说是1M，总之是一个编译时就确定的常数），如果申请的空间超过栈的剩余空间时，将提示overflow。因此，能从栈获得的空间较小。")]),a._v(" "),s("h4",{attrs:{id:"堆-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆-2"}},[a._v("#")]),a._v(" 堆：")]),a._v(" "),s("p",[a._v("堆是向高地址扩展的数据结构，是"),s("strong",[a._v("不连续的内存区域")]),a._v("。这是由于系统是用链表来存储的空闲内存地址的，自然是不连续的，而链表的遍历方向是由低地址向高地址。堆的大小受限于计算机系统中有效的"),s("strong",[a._v("虚拟内存")]),a._v("。由此可见，堆获得的空间比较灵活，也比较大。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/05/image-c91ec3d582474ef7bc2c2c5ba99a42b0.png",alt:"image.png"}})]),a._v(" "),s("h3",{attrs:{id:"_2-4申请效率的比较"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4申请效率的比较"}},[a._v("#")]),a._v(" 2.4申请效率的比较：")]),a._v(" "),s("h4",{attrs:{id:"栈-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#栈-3"}},[a._v("#")]),a._v(" 栈")]),a._v(" "),s("p",[a._v("由系统自动分配，速度较快。但程序员是无法控制的。")]),a._v(" "),s("h4",{attrs:{id:"堆-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆-3"}},[a._v("#")]),a._v(" 堆")]),a._v(" "),s("p",[a._v("是由new分配的内存，一般速度"),s("strong",[a._v("比较慢")]),a._v("，而且容易产生"),s("strong",[a._v("内存碎片")]),a._v(",不过用起来最方便.\n另外，在WINDOWS下，最好的方式是用VirtualAlloc分配内存，他不是在堆，也不是在栈是直接在进程的地址空间中保留一快内存，虽然用起来最不方便。但是速度快，也最灵活")]),a._v(" "),s("h3",{attrs:{id:"_2-5堆和栈中的存储内容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-5堆和栈中的存储内容"}},[a._v("#")]),a._v(" 2.5堆和栈中的存储内容")]),a._v(" "),s("h4",{attrs:{id:"栈-、"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#栈-、"}},[a._v("#")]),a._v(" 栈：、")]),a._v(" "),s("p",[a._v("在函数调用时，第一个进栈的是主函数（main）中后的下一条指令（函数调用语句的下一条可执行语句）的地址，然后是函数的各个参数，在大多数的C编译器中，参数是"),s("strong",[a._v("由右往左入栈")]),a._v("的，然后是函数中的局部变量。注意"),s("strong",[a._v("静态变量是不入栈")]),a._v("的。\n当本次函数调用结束后，局部变量先出栈，然后是参数，最后栈顶指针指向最开始存的地址，也就是主函数中的下一条指令，程序由该点继续运行。\n"),s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/05/image-dca1b9d418df4bbc9afd1f906286c0bb.png",alt:"image.png"}})]),a._v(" "),s("h4",{attrs:{id:"堆-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆-4"}},[a._v("#")]),a._v(" 堆：")]),a._v(" "),s("p",[a._v("一般是在堆的头部用一个字节存放堆的大小。堆中的具体内容有"),s("strong",[a._v("程序员")]),a._v("安排。")]),a._v(" "),s("h3",{attrs:{id:"_2-6存取效率的比较"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-6存取效率的比较"}},[a._v("#")]),a._v(" 2.6存取效率的比较")]),a._v(" "),s("p",[a._v('char s1[] = "aaaaaaaaaaaaaaa";\nchar *s2 = "bbbbbbbbbbbbbbbbb";\naaaaaaaaaaa是在运行时刻赋值的；\n而bbbbbbbbbbb是在编译时就确定的；\n但是，在以后的存取中，在栈上的数组比指针所指向的字符串(例如堆)快。')]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("#include "),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("stdio"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("h"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("char")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("char")]),a._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"1234567890"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("char")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("p "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"1234567890"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" \na "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" \na "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" \n对应的汇编代码 \n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" \n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("00401067")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),a._v("A "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4D")]),a._v(" F1 mov cl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("byte")]),a._v(" ptr "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("ebp"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0F")]),a._v("h"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" \n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0040106")]),a._v("A "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("88")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4D")]),a._v(" FC mov "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("byte")]),a._v(" ptr "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("ebp"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("cl \n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("11")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" \n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0040106D")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),a._v("B "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("55")]),a._v(" EC mov edx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("dword ptr "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("ebp"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("14")]),a._v("h"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" \n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("00401070")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),a._v("A "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("42")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("01")]),a._v(" mov al"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("byte")]),a._v(" ptr "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("edx"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" \n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("00401073")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("88")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("45")]),a._v(" FC mov "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("byte")]),a._v(" ptr "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("ebp"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("al \n\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br")])]),s("p",[a._v("第一种在读取时直接就把字符串中的元素读到寄存器cl中，而第二种则要先把指针值读到edx中，在根据edx读取字符，显然慢了。")]),a._v(" "),s("h3",{attrs:{id:"_2-7小结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-7小结"}},[a._v("#")]),a._v(" 2.7小结：")]),a._v(" "),s("p",[a._v("堆和栈的区别可以用如下的比喻来看出：\n使用"),s("strong",[a._v("栈")]),a._v("就象我们去饭馆里吃饭，只管点菜（发出申请）、付钱、和吃（使用），吃饱了就走，不必理会切菜、洗菜等准备工作和洗碗、刷锅等扫尾工作，他的好处是快捷，但是自由度小。\n使用"),s("strong",[a._v("堆")]),a._v("就象是自己动手做喜欢吃的菜肴，比较麻烦，但是比较符合自己的口味，而且自由度大。")]),a._v(" "),s("h4",{attrs:{id:"堆和栈的区别主要分"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆和栈的区别主要分"}},[a._v("#")]),a._v(" 堆和栈的区别主要分：")]),a._v(" "),s("p",[a._v("操作系统方面的堆和栈，如上面说的那些，不多说了。\n还有就是"),s("strong",[a._v("数据结构方面的堆和栈")]),a._v("，这些都是不同的概念。这里的堆实际上指的就是（满足堆性质的）优先队列的一种数据结构，第1个元素有最高的优先权；栈实际上就是满足先进后出的性质的数学或数据结构。\n虽然堆栈，堆栈的说法是连起来叫，但是他们还是有很大区别的，连着叫只是由于历史的原因。")]),a._v(" "),s("h2",{attrs:{id:"c语言的内存分配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#c语言的内存分配"}},[a._v("#")]),a._v(" c语言的内存分配")]),a._v(" "),s("p",[a._v("有关动态对象创建：一般来说，编译器将内存分为三部分：")]),a._v(" "),s("ul",[s("li",[a._v("静态存储区域、")]),a._v(" "),s("li",[a._v("栈、")]),a._v(" "),s("li",[a._v("堆。")])]),a._v(" "),s("p",[a._v("静态存储区（就是上面的全局静态）主要保存 全局变量和静态变量，\n栈存储调用函数相关的变量、地址等，\n堆存储动态生成的变量，在c中是指由malloc,free运算产生释放的存储空间，在c++中 就是指new和delete运算符作用的存储区域")]),a._v(" "),s("h3",{attrs:{id:"_1、-静态存储分配-static"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、-静态存储分配-static"}},[a._v("#")]),a._v(" 1、  静态存储分配（static）")]),a._v(" "),s("p",[a._v("指在编译时对数据对象分配固定的存储位置，运行时始终不变。即一旦存储空间的某个位置分配给了某个数据名，则在目标程序的整个运行过程中，此位置（地址）就属于该数据名。\n由静态存储分配产生的数据区称为静态数据区。\n静态存储分配适用于不允许递归过程或递归调用，不允许可变体积的数据结构的语言\n静态存储分配的特点：简单、易于实现\n例：FORTRAN语言，它所有的数据都属于这一类。")]),a._v(" "),s("h3",{attrs:{id:"_2、-动态存储分配-动态开辟-堆-函数调用-栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、-动态存储分配-动态开辟-堆-函数调用-栈"}},[a._v("#")]),a._v(" 2、  动态存储分配（动态开辟（堆） 函数调用（栈））")]),a._v(" "),s("p",[a._v("指在运行阶段动态地为源程序中的数据对象分配存储位置\n实行动态存储分配的语言的特点：\n允许递归过程\n允许可变数据结构（可变数组或记录等）\n允许用户自由申请和释放空间\n这种程序在编译时无法确定运行时所需数据空间的大小，需待程序运行时动态确定\n有两种动态存储分配方式：栈式(stack)、堆式(heap)。")]),a._v(" "),s("h4",{attrs:{id:"_1、-栈式动态存储分配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、-栈式动态存储分配"}},[a._v("#")]),a._v(" 1、  栈式动态存储分配")]),a._v(" "),s("p",[a._v("在数据空间中开辟一个栈区，每当调用一个过程时，它所需要的数据空间就分配在栈顶，每当过程工作结束时就释放这部分空间。空间的使用符合"),s("strong",[a._v("先借后还")]),a._v("的原则。\n特点：先借后还，管理简单，空间使用效率高\n栈式动态存储分配适合于 PASCAL、C 等典型过程式语言。")]),a._v(" "),s("h4",{attrs:{id:"_4、-堆式动态存储分配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、-堆式动态存储分配"}},[a._v("#")]),a._v(" 4、  堆式动态存储分配")]),a._v(" "),s("p",[a._v("在数据空间中开辟一片连续的存储区（通常叫做堆），每当需要时就从这片空间借用一块，不用时再退还。借用与归还未必服从“先借后还”的原则。\n堆式动态存储分配适合于用户可以自由申请和归还数据空间的语言，如C++。\n特点：适用范围广，容易出现碎片。\n如何充分利用空间是个难题。")]),a._v(" "),s("h3",{attrs:{id:"_3-总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-总结"}},[a._v("#")]),a._v(" 3.总结")]),a._v(" "),s("p",[a._v("从以上分析可知， 静态存储变量是一直存在的， 而"),s("strong",[a._v("动态存储")]),a._v("变量则时而存在时而消失。我们又把这种由于变量存储方式不同而产生的特性称变量的生存期。 生存期表示了变量存在的时间。 生存期和作用域是从时间和空间这两个不同的角度来描述变量的特性，这两者既有联系，又有区别。 一个变量究竟属于哪一种存储方式， 并不能仅从其作用域来判断，还应有明确的存储类型说明。")]),a._v(" "),s("h2",{attrs:{id:"内存中用户存储空间的分配情况-三种"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内存中用户存储空间的分配情况-三种"}},[a._v("#")]),a._v(" 内存中用户存储空间的分配情况（三种）：")]),a._v(" "),s("h3",{attrs:{id:"程序区"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#程序区"}},[a._v("#")]),a._v(" 程序区：")]),a._v(" "),s("p",[a._v("存放程序语句")]),a._v(" "),s("h3",{attrs:{id:"静态存储区"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#静态存储区"}},[a._v("#")]),a._v(" 静态存储区：")]),a._v(" "),s("p",[a._v("存放全局变量，在程序开始执行时给全局变量分配存储区，程序执行完毕就释放。")]),a._v(" "),s("h3",{attrs:{id:"动态存储区"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#动态存储区"}},[a._v("#")]),a._v(" 动态存储区：")]),a._v(" "),s("p",[a._v("存放以下数据：函数形式参数。在调用函数时给形参分配存储空间；自动变量(未加static声明的局部变量) ；函数调用时的现场保护和返回地址等；")]),a._v(" "),s("h4",{attrs:{id:"栈-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#栈-4"}},[a._v("#")]),a._v(" 栈")]),a._v(" "),s("p",[a._v("栈就是那些由编辑器在需要的时候分配，在不需要的时候自动清除的变量的存储区，里面的变量通常是局部变量。函数参数等。")]),a._v(" "),s("h4",{attrs:{id:"堆-5"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆-5"}},[a._v("#")]),a._v(" 堆")]),a._v(" "),s("p",[a._v("就是那些右new分配的内存块，他们的释放编辑器不去管，由我们的应用程序去控制，一般一个new就要对应一个delete.如果程序员没有释放掉，那么在程序结束后，操作系统会自动回收。\n"),s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Control-body/tuChuang/2022/05/image-ff5f8447d8a64d6ab979a3972abb311b.png",alt:"image.png"}})])])}),[],!1,null,null,null);t.default=n.exports}}]);